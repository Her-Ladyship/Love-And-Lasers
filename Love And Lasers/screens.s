;
; File generated by cc65 v 2.19 - Git 065b0d7
;
	.fopt		compiler,"cc65 v 2.19 - Git 065b0d7"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_clear_screen
	.export		_clear_line
	.export		_display_blinking_message
	.import		_oam_clear
	.import		_vram_adr
	.import		_vram_fill
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_i
	.import		_frame_count

.segment	"RODATA"

S0001:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$00

; ---------------------------------------------------------------
; void __near__ clear_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_screen: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(' ', 32 * 30);
;
	lda     #$20
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; oam_clear();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ clear_line (unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_line: near

.segment	"CODE"

;
; void clear_line(unsigned char y) {
;
	jsr     pusha
;
; multi_vram_buffer_horz("                                ", 32, NTADR_A(0, y));
;
	jsr     decsp3
	lda     #<(S0001)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0001)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ display_blinking_message (const char *message, unsigned char len, unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_blinking_message: near

.segment	"CODE"

;
; void display_blinking_message(const char* message, unsigned char len, unsigned char x, unsigned char y) {
;
	jsr     pusha
;
; if ((frame_count & 0x20) == 0) {
;
	lda     _frame_count
	and     #$20
	bne     L000A
;
; multi_vram_buffer_horz(message, len, NTADR_A(x, y));
;
	jsr     decsp3
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; } else {
;
	jmp     incsp5
;
; for (i = 0; i < len; ++i) {
;
L000A:	lda     #$00
	sta     _i
L000B:	lda     _i
	ldy     #$02
	cmp     (sp),y
	bcs     L0006
;
; one_vram_buffer(' ', NTADR_A(x + i, y));
;
	lda     #$20
	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     _i
	bcc     L0009
	inx
L0009:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < len; ++i) {
;
	inc     _i
	jmp     L000B
;
; }
;
L0006:	jmp     incsp5

.endproc

