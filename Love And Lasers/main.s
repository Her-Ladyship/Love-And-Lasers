;
; File generated by cc65 v 2.19 - Git 065b0d7
;
	.fopt		compiler,"cc65 v 2.19 - Git 065b0d7"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_rand8
	.import		_vram_adr
	.import		_vram_fill
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_check_collision
	.export		_palette
	.export		_game_state
	.export		_frame_count
	.export		_selected_crewmate
	.export		_shmup_screen_drawn
	.export		_shmup_started
	.export		_dialogue_shown
	.export		_ending_shown
	.export		_i
	.export		_j
	.export		_hp_string
	.export		_pad1
	.export		_pad1_old
	.export		_player_x
	.export		_player_y
	.export		_player_health
	.export		_bullet_x
	.export		_bullet_y
	.export		_bullet_active
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_bullet_box
	.export		_enemy_box
	.export		_player_sprite
	.export		_bullet_sprite
	.export		_enemy_sprite
	.export		_update_arrow
	.export		_clear_screen
	.export		_draw_crewmate_menu
	.export		_display_blinking_message
	.export		_clear_line
	.export		_clear_all_bullets
	.export		_clear_all_enemies
	.export		_spawn_enemies
	.export		_update_enemies
	.export		_handle_shmup_input
	.export		_mission_begin_text
	.export		_crewmate_confirm_text
	.export		_handle_selection_arrow
	.export		_spawn_bullets
	.export		_update_bullets
	.export		_draw_player
	.export		_enemy_killed_check
	.export		_check_player_hit
	.export		_draw_hud
	.export		_main

.segment	"DATA"

_game_state:
	.byte	$00
_frame_count:
	.byte	$00
_selected_crewmate:
	.byte	$00
_shmup_screen_drawn:
	.byte	$00
_shmup_started:
	.byte	$00
_dialogue_shown:
	.byte	$00
_ending_shown:
	.byte	$00
_i:
	.byte	$00
_j:
	.byte	$00
_hp_string:
	.byte	$48,$50,$3A,$20,$33,$00
_player_x:
	.byte	$20
_player_y:
	.byte	$78
_player_health:
	.byte	$03

.segment	"RODATA"

_palette:
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_player_sprite:
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$80
_bullet_sprite:
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$80
_enemy_sprite:
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$80
S0021:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$00
S003C:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$57,$55,$42,$42
	.byte	$4C,$45,$20,$57,$55,$42,$42,$4C,$45,$21,$00
S0036:
	.byte	$4C,$55,$4D,$41,$2D,$36,$3A,$20,$55,$50,$4C,$4F,$41,$44,$49,$4E
	.byte	$47,$20,$4D,$49,$53,$53,$49,$4F,$4E,$00
S002C:
	.byte	$4C,$45,$54,$27,$53,$20,$4D,$41,$4B,$45,$20,$54,$48,$49,$53,$20
	.byte	$45,$46,$46,$49,$43,$49,$45,$4E,$54,$00
S0026:
	.byte	$49,$27,$4C,$4C,$20,$48,$41,$55,$4E,$54,$20,$59,$4F,$55,$20,$50
	.byte	$45,$52,$53,$4F,$4E,$41,$4C,$4C,$59,$00
S003A:
	.byte	$4D,$52,$20,$42,$55,$42,$42,$4C,$45,$53,$3A,$20,$57,$55,$42,$42
	.byte	$4C,$45,$20,$57,$55,$42,$42,$4C,$45,$00
S0034:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$44,$4F,$57,$4E,$2C,$20
	.byte	$4D,$45,$41,$54,$42,$41,$47,$2E,$00
S002A:
	.byte	$54,$41,$43,$54,$49,$43,$41,$4C,$20,$53,$59,$53,$54,$45,$4D,$53
	.byte	$20,$47,$52,$45,$45,$4E,$20,$2D,$00
S000D:
	.byte	$50,$52,$45,$53,$53,$20,$41,$20,$54,$4F,$20,$53,$54,$41,$52,$54
	.byte	$20,$4D,$49,$53,$53,$49,$4F,$4E,$00
S0032:
	.byte	$5A,$41,$52,$4E,$45,$4C,$4C,$41,$3A,$20,$44,$4F,$4E,$27,$54,$20
	.byte	$53,$4C,$4F,$57,$20,$4D,$45,$00
S0019:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$20,$54,$4F,$20,$52
	.byte	$45,$53,$54,$41,$52,$54,$00
S0024:
	.byte	$49,$46,$20,$59,$4F,$55,$20,$47,$45,$54,$20,$4D,$45,$20,$4B,$49
	.byte	$4C,$4C,$45,$44,$2C,$00
S000B:
	.byte	$53,$45,$4C,$45,$43,$54,$20,$59,$4F,$55,$52,$20,$43,$52,$45,$57
	.byte	$4D,$41,$54,$45,$00
S0030:
	.byte	$42,$55,$42,$42,$4C,$45,$20,$4D,$4F,$44,$45,$20,$45,$4E,$47,$41
	.byte	$47,$45,$44,$21,$00
S0013:
	.byte	$50,$52,$45,$53,$53,$20,$41,$20,$54,$4F,$20,$43,$4F,$4E,$54,$49
	.byte	$4E,$55,$45,$00
S0038:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$50,$52,$4F,$54,$4F,$43,$4F,$4C
	.byte	$53,$2E,$00
S0007:
	.byte	$42,$52,$49,$45,$46,$49,$4E,$47,$20,$47,$4F,$45,$53,$20,$48,$45
	.byte	$52,$45,$00
S0017:
	.byte	$54,$48,$41,$4E,$4B,$53,$20,$46,$4F,$52,$20,$50,$4C,$41,$59,$49
	.byte	$4E,$47,$00
S0011:
	.byte	$47,$4F,$4F,$44,$20,$4A,$4F,$42,$2C,$20,$43,$41,$50,$54,$41,$49
	.byte	$4E,$00
S000F:
	.byte	$4D,$49,$53,$53,$49,$4F,$4E,$20,$43,$4F,$4D,$50,$4C,$45,$54,$45
	.byte	$21,$00
S0015:
	.byte	$45,$4E,$44,$49,$4E,$47,$20,$47,$4F,$45,$53,$20,$48,$45,$52,$45
	.byte	$00
S0009:
	.byte	$50,$52,$45,$53,$53,$20,$41,$20,$42,$55,$54,$54,$4F,$4E,$00
S0003:
	.byte	$4C,$4F,$56,$45,$20,$26,$20,$4C,$41,$53,$45,$52,$53,$00
S0005:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
S002E:
	.byte	$4D,$52,$20,$42,$55,$42,$42,$4C,$45,$53,$3A,$00
S001F:
	.byte	$4D,$52,$20,$42,$55,$42,$42,$4C,$45,$53,$00
S0022:
	.byte	$5A,$41,$52,$4E,$45,$4C,$4C,$41,$3A,$00
S001B:
	.byte	$5A,$41,$52,$4E,$45,$4C,$4C,$41,$00
S0028:
	.byte	$4C,$55,$4D,$41,$2D,$36,$3A,$00
S001D:
	.byte	$4C,$55,$4D,$41,$2D,$36,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_old:
	.res	1,$00
_bullet_x:
	.res	3,$00
_bullet_y:
	.res	3,$00
_bullet_active:
	.res	3,$00
_enemy_x:
	.res	6,$00
_enemy_y:
	.res	6,$00
_enemy_active:
	.res	6,$00
_bullet_box:
	.res	4,$00
_enemy_box:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ update_arrow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_arrow: near

.segment	"CODE"

;
; int arrow_addr = NTADR_A(8, 11 + selected_crewmate * 4);
;
	ldx     #$00
	lda     _selected_crewmate
	jsr     shlax2
	clc
	adc     #$0B
	bcc     L0002
	inx
L0002:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$08
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     pushax
;
; one_vram_buffer('>', arrow_addr);
;
	lda     #$3E
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _one_vram_buffer
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ clear_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_screen: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(' ', 32 * 30);
;
	lda     #$20
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ draw_crewmate_menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_crewmate_menu: near

.segment	"CODE"

;
; WRITE("ZARNELLA", 10, 11);
;
	jsr     decsp3
	lda     #<(S001B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S001B)
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$6A
	jsr     _multi_vram_buffer_horz
;
; WRITE("LUMA-6", 10, 15);
;
	jsr     decsp3
	lda     #<(S001D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S001D)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$EA
	jsr     _multi_vram_buffer_horz
;
; WRITE("MR BUBBLES", 10, 19);
;
	jsr     decsp3
	lda     #<(S001F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S001F)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$6A
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ display_blinking_message (const char *message, unsigned char len, unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_blinking_message: near

.segment	"CODE"

;
; void display_blinking_message(const char* message, unsigned char len, unsigned char x, unsigned char y) {
;
	jsr     pusha
;
; if ((frame_count & 0x20) == 0) {
;
	lda     _frame_count
	and     #$20
	bne     L000A
;
; multi_vram_buffer_horz(message, len, NTADR_A(x, y));
;
	jsr     decsp3
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; } else {
;
	jmp     incsp5
;
; for (i = 0; i < len; ++i) {
;
L000A:	lda     #$00
	sta     _i
L000B:	lda     _i
	ldy     #$02
	cmp     (sp),y
	bcs     L0006
;
; one_vram_buffer(' ', NTADR_A(x + i, y));
;
	lda     #$20
	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     _i
	bcc     L0009
	inx
L0009:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < len; ++i) {
;
	inc     _i
	jmp     L000B
;
; }
;
L0006:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ clear_line (unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_line: near

.segment	"CODE"

;
; void clear_line(unsigned char y) {
;
	jsr     pusha
;
; multi_vram_buffer_horz("                                ", 32, NTADR_A(0, y));
;
	jsr     decsp3
	lda     #<(S0021)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0021)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ clear_all_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_all_bullets: near

.segment	"CODE"

;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
	lda     #$00
	sta     _i
L0007:	lda     _i
	cmp     #$03
	bcs     L0003
;
; bullet_active[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _bullet_active,y
;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
	inc     _i
	jmp     L0007
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_all_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_all_enemies: near

.segment	"CODE"

;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	sta     _i
L0007:	lda     _i
	cmp     #$06
	bcs     L0003
;
; enemy_active[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _enemy_active,y
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	inc     _i
	jmp     L0007
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_enemies: near

.segment	"CODE"

;
; if ((frame_count % 60) == 0) { // roughly once per second
;
	lda     _frame_count
	jsr     pusha0
	lda     #$3C
	jsr     tosumoda0
	cpx     #$00
	bne     L0005
	cmp     #$00
	bne     L0005
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	sta     _i
L000E:	lda     _i
	cmp     #$06
	bcs     L0005
;
; if (!enemy_active[i]) {
;
	ldy     _i
	lda     _enemy_active,y
	bne     L000F
;
; enemy_active[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _enemy_active,y
;
; enemy_x[i] = 240;
;
	ldy     _i
	lda     #$F0
	sta     _enemy_x,y
;
; enemy_y[i] = PLAYFIELD_TOP + (rand8() % (PLAYFIELD_BOTTOM - PLAYFIELD_TOP));
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _i
	bcc     L000C
	inx
L000C:	jsr     pushax
	jsr     _rand8
	jsr     pushax
	lda     #$90
	jsr     tosumoda0
	clc
	adc     #$30
	ldy     #$00
	jmp     staspidx
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L000F:	inc     _i
	jmp     L000E
;
; }
;
L0005:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_enemies: near

.segment	"CODE"

;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	sta     _i
L0011:	lda     _i
	cmp     #$06
	bcs     L0003
;
; if (enemy_active[i]) {
;
	ldy     _i
	lda     _enemy_active,y
	beq     L0012
;
; if (frame_count % 2 == 0) { // Only move every other frame
;
	lda     _frame_count
	and     #$01
	bne     L000D
;
; if (enemy_x[i] <= ENEMY_LEFT_LIMIT) {
;
	ldy     _i
	lda     _enemy_x,y
	cmp     #$09
	bcs     L000A
;
; enemy_active[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _enemy_active,y
;
; } else {
;
	jmp     L000D
;
; enemy_x[i] -= 1;
;
L000A:	lda     #<(_enemy_x)
	ldx     #>(_enemy_x)
	clc
	adc     _i
	bcc     L000E
	inx
L000E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; oam_meta_spr(enemy_x[i], enemy_y[i], enemy_sprite);
;
L000D:	jsr     decsp2
	ldy     _i
	lda     _enemy_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _enemy_y,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_enemy_sprite)
	ldx     #>(_enemy_sprite)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0012:	inc     _i
	jmp     L0011
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_shmup_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_shmup_input: near

.segment	"CODE"

;
; if (pad1 & PAD_LEFT && player_x > 8) player_x--;
;
	lda     _pad1
	and     #$02
	beq     L0015
	lda     _player_x
	cmp     #$09
	bcc     L0015
	dec     _player_x
;
; if (pad1 & PAD_RIGHT && player_x < 40) player_x++;
;
L0015:	lda     _pad1
	and     #$01
	beq     L0019
	lda     _player_x
	cmp     #$28
	bcs     L0019
	inc     _player_x
;
; if (pad1 & PAD_UP && player_y > PLAYFIELD_TOP) player_y--;
;
L0019:	lda     _pad1
	and     #$08
	beq     L001D
	lda     _player_y
	cmp     #$31
	bcc     L001D
	dec     _player_y
;
; if (pad1 & PAD_DOWN && player_y < PLAYFIELD_BOTTOM) player_y++;
;
L001D:	lda     _pad1
	and     #$04
	beq     L001F
	lda     _player_y
	cmp     #$C0
	bcc     L0020
L001F:	rts
L0020:	inc     _player_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ mission_begin_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mission_begin_text: near

.segment	"CODE"

;
; if (selected_crewmate == 0) {
;
	lda     _selected_crewmate
	bne     L0007
;
; WRITE("ZARNELLA:", 11, 10);
;
	jsr     decsp3
	lda     #<(S0022)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0022)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4B
	jsr     _multi_vram_buffer_horz
;
; WRITE("IF YOU GET ME KILLED,", 5, 13);
;
	jsr     decsp3
	lda     #<(S0024)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0024)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A5
	jsr     _multi_vram_buffer_horz
;
; WRITE("I'LL HAUNT YOU PERSONALLY", 3, 15);
;
	jsr     decsp3
	lda     #<(S0026)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0026)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E3
;
; else if (selected_crewmate == 1) {
;
	jmp     _multi_vram_buffer_horz
L0007:	lda     _selected_crewmate
	cmp     #$01
	bne     L0004
;
; WRITE("LUMA-6:", 12, 10);
;
	jsr     decsp3
	lda     #<(S0028)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0028)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4C
	jsr     _multi_vram_buffer_horz
;
; WRITE("TACTICAL SYSTEMS GREEN -", 4, 13);
;
	jsr     decsp3
	lda     #<(S002A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S002A)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A4
	jsr     _multi_vram_buffer_horz
;
; WRITE("LET'S MAKE THIS EFFICIENT", 3, 15);
;
	jsr     decsp3
	lda     #<(S002C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S002C)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E3
;
; else {
;
	jmp     _multi_vram_buffer_horz
;
; WRITE("MR BUBBLES:", 11, 10);
;
L0004:	jsr     decsp3
	lda     #<(S002E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S002E)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4B
	jsr     _multi_vram_buffer_horz
;
; WRITE("BUBBLE MODE ENGAGED!", 6, 13);
;
	jsr     decsp3
	lda     #<(S0030)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0030)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ crewmate_confirm_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_crewmate_confirm_text: near

.segment	"CODE"

;
; if (selected_crewmate == 0) {
;
	lda     _selected_crewmate
	bne     L0007
;
; WRITE("ZARNELLA: DON'T SLOW ME", 2, 12);
;
	jsr     decsp3
	lda     #<(S0032)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0032)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$82
	jsr     _multi_vram_buffer_horz
;
; WRITE("          DOWN, MEATBAG.", 2, 14);
;
	jsr     decsp3
	lda     #<(S0034)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0034)
	sta     (sp),y
	lda     #$18
;
; else if (selected_crewmate == 1) {
;
	jmp     L000B
L0007:	lda     _selected_crewmate
	cmp     #$01
	bne     L0004
;
; WRITE("LUMA-6: UPLOADING MISSION", 2, 12);
;
	jsr     decsp3
	lda     #<(S0036)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0036)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$82
	jsr     _multi_vram_buffer_horz
;
; WRITE("        PROTOCOLS.", 2, 14);
;
	jsr     decsp3
	lda     #<(S0038)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0038)
	sta     (sp),y
	lda     #$12
;
; else {
;
	jmp     L000B
;
; WRITE("MR BUBBLES: WUBBLE WUBBLE", 2, 12);
;
L0004:	jsr     decsp3
	lda     #<(S003A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S003A)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$82
	jsr     _multi_vram_buffer_horz
;
; WRITE("            WUBBLE WUBBLE!", 2, 14);
;
	jsr     decsp3
	lda     #<(S003C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S003C)
	sta     (sp),y
	lda     #$1A
L000B:	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$C2
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ handle_selection_arrow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_selection_arrow: near

.segment	"CODE"

;
; if ((pad1 & PAD_DOWN) && !(pad1_old & PAD_DOWN)) {
;
	lda     _pad1
	and     #$04
	beq     L0010
	lda     _pad1_old
	and     #$04
	bne     L0010
;
; selected_crewmate++;
;
	inc     _selected_crewmate
;
; if (selected_crewmate > 2) selected_crewmate = 0;
;
	lda     _selected_crewmate
	cmp     #$03
	bcc     L0010
	lda     #$00
	sta     _selected_crewmate
;
; if ((pad1 & PAD_UP) && !(pad1_old & PAD_UP)) {
;
L0010:	lda     _pad1
	and     #$08
	beq     L0012
	lda     _pad1_old
	and     #$08
	beq     L0013
L0012:	rts
;
; if (selected_crewmate == 0) selected_crewmate = 2;
;
L0013:	lda     _selected_crewmate
	bne     L0014
	lda     #$02
	sta     _selected_crewmate
;
; else selected_crewmate--;
;
	rts
L0014:	dec     _selected_crewmate
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_bullets: near

.segment	"CODE"

;
; if ((pad1 & PAD_A) && !(pad1_old & PAD_A)) {
;
	lda     _pad1
	and     #$80
	beq     L0011
	lda     _pad1_old
	and     #$80
	beq     L0015
L0011:	rts
;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
L0015:	sta     _i
L0013:	lda     _i
	cmp     #$03
	bcs     L0007
;
; if (!bullet_active[i]) {
;
	ldy     _i
	lda     _bullet_active,y
	bne     L0014
;
; bullet_active[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _bullet_active,y
;
; bullet_x[i] = player_x + 8;
;
	lda     #<(_bullet_x)
	ldx     #>(_bullet_x)
	clc
	adc     _i
	bcc     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	lda     _player_x
	clc
	adc     #$08
	ldy     #$00
	sta     (ptr1),y
;
; bullet_y[i] = player_y;
;
	ldy     _i
	lda     _player_y
	sta     _bullet_y,y
;
; break;
;
	rts
;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
L0014:	inc     _i
	jmp     L0013
;
; }
;
L0007:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_bullets: near

.segment	"CODE"

;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
	lda     #$00
	sta     _i
L000F:	lda     _i
	cmp     #$03
	bcs     L0003
;
; if (bullet_active[i]) {
;
	ldy     _i
	lda     _bullet_active,y
	beq     L0010
;
; bullet_x[i] += 2;
;
	lda     #<(_bullet_x)
	ldx     #>(_bullet_x)
	clc
	adc     _i
	bcc     L0008
	inx
L0008:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (bullet_x[i] > BULLET_RIGHT_LIMIT) {
;
	ldy     _i
	lda     _bullet_x,y
	cmp     #$FD
	bcc     L0009
;
; bullet_active[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _bullet_active,y
;
; } else {
;
	jmp     L0010
;
; oam_meta_spr(bullet_x[i], bullet_y[i], bullet_sprite);
;
L0009:	jsr     decsp2
	ldy     _i
	lda     _bullet_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _bullet_y,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_bullet_sprite)
	ldx     #>(_bullet_sprite)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
L0010:	inc     _i
	jmp     L000F
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(player_x, player_y, player_sprite);
;
	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_player_sprite)
	ldx     #>(_player_sprite)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_killed_check (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_killed_check: near

.segment	"CODE"

;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
	lda     #$00
	sta     _i
L0015:	lda     _i
	cmp     #$03
	bcc     L0019
;
; }
;
	rts
;
; if (bullet_active[i]) {
;
L0019:	ldy     _i
	lda     _bullet_active,y
	beq     L0018
;
; bullet_box.x = bullet_x[i];
;
	ldy     _i
	lda     _bullet_x,y
	sta     _bullet_box
;
; bullet_box.y = bullet_y[i];
;
	ldy     _i
	lda     _bullet_y,y
	sta     _bullet_box+1
;
; bullet_box.width = 8;
;
	lda     #$08
	sta     _bullet_box+2
;
; bullet_box.height = 8;
;
	sta     _bullet_box+3
;
; for (j = 0; j < MAX_ENEMIES; ++j) {
;
	lda     #$00
	sta     _j
L0016:	lda     _j
	cmp     #$06
	bcs     L0018
;
; if (enemy_active[j]) {
;
	ldy     _j
	lda     _enemy_active,y
	beq     L0017
;
; enemy_box.x = enemy_x[j];
;
	ldy     _j
	lda     _enemy_x,y
	sta     _enemy_box
;
; enemy_box.y = enemy_y[j];
;
	ldy     _j
	lda     _enemy_y,y
	sta     _enemy_box+1
;
; enemy_box.width = 8;
;
	lda     #$08
	sta     _enemy_box+2
;
; enemy_box.height = 8;
;
	sta     _enemy_box+3
;
; if (check_collision(&bullet_box, &enemy_box)) {
;
	lda     #<(_bullet_box)
	ldx     #>(_bullet_box)
	jsr     pushax
	lda     #<(_enemy_box)
	ldx     #>(_enemy_box)
	jsr     _check_collision
	tax
	beq     L0017
;
; bullet_active[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _bullet_active,y
;
; enemy_active[j] = 0;
;
	ldy     _j
	sta     _enemy_active,y
;
; break; // Stop checking this bullet
;
	jmp     L0018
;
; for (j = 0; j < MAX_ENEMIES; ++j) {
;
L0017:	inc     _j
	jmp     L0016
;
; for (i = 0; i < MAX_BULLETS; ++i) {
;
L0018:	inc     _i
	jmp     L0015

.endproc

; ---------------------------------------------------------------
; void __near__ check_player_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_player_hit: near

.segment	"CODE"

;
; player_box.x = player_x;
;
	jsr     decsp4
	lda     _player_x
	ldy     #$00
	sta     (sp),y
;
; player_box.y = player_y;
;
	lda     _player_y
	iny
	sta     (sp),y
;
; player_box.width = 8;
;
	lda     #$08
	iny
	sta     (sp),y
;
; player_box.height = 8;
;
	iny
	sta     (sp),y
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	sta     _i
L000E:	lda     _i
	cmp     #$06
	bcs     L0003
;
; if (enemy_active[i]) {
;
	ldy     _i
	lda     _enemy_active,y
	beq     L0010
;
; enemy_box.x = enemy_x[i];
;
	ldy     _i
	lda     _enemy_x,y
	sta     _enemy_box
;
; enemy_box.y = enemy_y[i];
;
	ldy     _i
	lda     _enemy_y,y
	sta     _enemy_box+1
;
; enemy_box.width = 8;
;
	lda     #$08
	sta     _enemy_box+2
;
; enemy_box.height = 8;
;
	sta     _enemy_box+3
;
; if (check_collision(&player_box, &enemy_box)) {
;
	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_enemy_box)
	ldx     #>(_enemy_box)
	jsr     _check_collision
	tax
	beq     L0010
;
; enemy_active[i] = 0; // enemy dies on impact
;
	ldy     _i
	lda     #$00
	sta     _enemy_active,y
;
; if (player_health > 0) player_health--;
;
	lda     _player_health
	beq     L000F
	dec     _player_health
;
; if (player_health == 0) {
;
L000F:	lda     _player_health
	bne     L0003
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; clear_all_bullets();
;
	jsr     _clear_all_bullets
;
; clear_all_enemies();
;
	jsr     _clear_all_enemies
;
; oam_clear();
;
	jsr     _oam_clear
;
; game_state = STATE_DIALOGUE; // FOR NOW
;
	lda     #$05
	sta     _game_state
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; break; // Only take 1 hit per frame
;
	jmp     incsp4
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0010:	inc     _i
	jmp     L000E
;
; }
;
L0003:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ draw_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_hud: near

.segment	"CODE"

;
; hp_string[4] = '0' + player_health;
;
	lda     _player_health
	clc
	adc     #$30
	sta     _hp_string+4
;
; WRITE(hp_string, 2, 1); // Draw near top-left corner
;
	jsr     decsp3
	lda     #<(_hp_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_hp_string)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$22
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palette);      // for background
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(&palette[4]);  // for sprite colours
;
	lda     #<(_palette+4)
	ldx     #>(_palette+4)
	jsr     _pal_spr
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; ppu_on_all();
;
L005A:	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; frame_count++;
;
	inc     _frame_count
;
; pad1_old = pad1;
;
	lda     _pad1
	sta     _pad1_old
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (game_state == STATE_TITLE) {
;
	lda     _game_state
	bne     L003C
;
; WRITE("LOVE & LASERS", 10, 12);
;
	jsr     decsp3
	lda     #<(S0003)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0003)
	sta     (sp),y
	lda     #$0D
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$8A
	jsr     _multi_vram_buffer_horz
;
; BLINK_MSG("PRESS START", 11, 15);
;
	jsr     decsp4
	lda     #<(S0005)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(S0005)
	sta     (sp),y
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$0F
	jsr     _display_blinking_message
;
; if ((pad1 & PAD_START) && !(pad1_old & PAD_START)) {
;
	lda     _pad1
	and     #$10
	beq     L0002
	lda     _pad1_old
	and     #$10
	bne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; WRITE("BRIEFING GOES HERE", 7, 12);
;
	jsr     decsp3
	lda     #<(S0007)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0007)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$87
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_state = STATE_BRIEFING;
;
	lda     #$01
	sta     _game_state
;
; else if (game_state == STATE_BRIEFING) {
;
	jmp     L0002
L003C:	lda     _game_state
	cmp     #$01
	bne     L0040
;
; BLINK_MSG("PRESS A BUTTON", 9, 15);
;
	jsr     decsp4
	lda     #<(S0009)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(S0009)
	sta     (sp),y
	lda     #$0E
	ldy     #$01
	sta     (sp),y
	lda     #$09
	dey
	sta     (sp),y
	lda     #$0F
	jsr     _display_blinking_message
;
; if ((pad1 & PAD_A) && !(pad1_old & PAD_A)) {
;
	lda     _pad1
	and     #$80
	jeq     L0002
	lda     _pad1_old
	and     #$80
	jne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; WRITE("SELECT YOUR CREWMATE", 6, 4);
;
	jsr     decsp3
	lda     #<(S000B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S000B)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$86
	jsr     _multi_vram_buffer_horz
;
; clear_line(15);
;
	lda     #$0F
	jsr     _clear_line
;
; selected_crewmate = 0;
;
	lda     #$00
	sta     _selected_crewmate
;
; draw_crewmate_menu();
;
	jsr     _draw_crewmate_menu
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_state = STATE_SELECT_CREWMATE;
;
	lda     #$02
	sta     _game_state
;
; else if (game_state == STATE_SELECT_CREWMATE) {
;
	jmp     L0002
L0040:	lda     _game_state
	cmp     #$02
	jne     L0044
;
; unsigned char old_crewmate = selected_crewmate;
;
	lda     _selected_crewmate
	jsr     pusha
;
; handle_selection_arrow();
;
	jsr     _handle_selection_arrow
;
; one_vram_buffer(' ', NTADR_A(8, 11 + old_crewmate * 4));
;
	lda     #$20
	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     shlax2
	clc
	adc     #$0B
	bcc     L0012
	inx
L0012:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$08
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; update_arrow();
;
	jsr     _update_arrow
;
; if ((pad1 & PAD_A) && !(pad1_old & PAD_A)) {
;
	lda     _pad1
	and     #$80
	beq     L0013
	lda     _pad1_old
	and     #$80
	bne     L0013
;
; ppu_off();
;
	jsr     _ppu_off
;
; one_vram_buffer(' ', NTADR_A(8, 11 + old_crewmate * 4));
;
	lda     #$20
	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     shlax2
	clc
	adc     #$0B
	bcc     L0017
	inx
L0017:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$08
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; clear_screen();
;
	jsr     _clear_screen
;
; game_state = STATE_CREWMATE_CONFIRM;
;
	lda     #$03
	sta     _game_state
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; }
;
L0013:	jsr     incsp1
;
; else if (game_state == STATE_CREWMATE_CONFIRM) {
;
	jmp     L0002
L0044:	lda     _game_state
	cmp     #$03
	bne     L0048
;
; crewmate_confirm_text();
;
	jsr     _crewmate_confirm_text
;
; if ((pad1 & PAD_A) && !(pad1_old & PAD_A)) {
;
	lda     _pad1
	and     #$80
	jeq     L0002
	lda     _pad1_old
	and     #$80
	jne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; game_state = STATE_SHMUP;
;
	lda     #$04
	sta     _game_state
;
; else if (game_state == STATE_SHMUP) {
;
	jmp     L005A
L0048:	lda     _game_state
	cmp     #$04
	jne     L0050
;
; if (!shmup_screen_drawn) {
;
	lda     _shmup_screen_drawn
	bne     L0049
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; mission_begin_text();
;
	jsr     _mission_begin_text
;
; shmup_screen_drawn = 1;
;
	lda     #$01
	sta     _shmup_screen_drawn
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if (shmup_started == 0) {
;
L0049:	lda     _shmup_started
	bne     L0021
;
; BLINK_MSG("PRESS A TO START MISSION", 4, 24);
;
	jsr     decsp4
	lda     #<(S000D)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(S000D)
	sta     (sp),y
	lda     #$18
	ldy     #$01
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #$18
	jsr     _display_blinking_message
;
; if ((pad1 & PAD_A) && !(pad1_old & PAD_A)) {
;
	lda     _pad1
	and     #$80
	jeq     L0002
	lda     _pad1_old
	and     #$80
	jne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; clear_line(24);
;
	lda     #$18
	jsr     _clear_line
;
; shmup_started = 1;
;
	lda     #$01
	sta     _shmup_started
;
; else {
;
	jmp     L005A
;
; handle_shmup_input();
;
L0021:	jsr     _handle_shmup_input
;
; draw_player();
;
	jsr     _draw_player
;
; draw_hud();
;
	jsr     _draw_hud
;
; spawn_bullets();
;
	jsr     _spawn_bullets
;
; update_bullets();
;
	jsr     _update_bullets
;
; spawn_enemies();
;
	jsr     _spawn_enemies
;
; update_enemies();
;
	jsr     _update_enemies
;
; enemy_killed_check();
;
	jsr     _enemy_killed_check
;
; check_player_hit();
;
	jsr     _check_player_hit
;
; if ((pad1 & PAD_START) && !(pad1_old & PAD_START)) {
;
	lda     _pad1
	and     #$10
	jeq     L0002
	lda     _pad1_old
	and     #$10
	jne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; clear_all_bullets();
;
	jsr     _clear_all_bullets
;
; clear_all_enemies();
;
	jsr     _clear_all_enemies
;
; oam_clear();
;
	jsr     _oam_clear
;
; shmup_screen_drawn = 0;
;
	lda     #$00
	sta     _shmup_screen_drawn
;
; shmup_started = 0;
;
	sta     _shmup_started
;
; game_state = STATE_DIALOGUE;
;
	lda     #$05
	sta     _game_state
;
; else if (game_state == STATE_DIALOGUE) {
;
	jmp     L005A
L0050:	lda     _game_state
	cmp     #$05
	jne     L0055
;
; if (!dialogue_shown) {
;
	lda     _dialogue_shown
	bne     L0051
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; WRITE("MISSION COMPLETE!", 7, 10);
;
	jsr     decsp3
	lda     #<(S000F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S000F)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; WRITE("GOOD JOB, CAPTAIN", 7, 12);
;
	jsr     decsp3
	lda     #<(S0011)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0011)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$87
	jsr     _multi_vram_buffer_horz
;
; WRITE("PRESS A TO CONTINUE", 6, 24);
;
	jsr     decsp3
	lda     #<(S0013)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0013)
	sta     (sp),y
	lda     #$13
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$06
	jsr     _multi_vram_buffer_horz
;
; dialogue_shown = 1;
;
	lda     #$01
	sta     _dialogue_shown
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if ((pad1 & PAD_A) && !(pad1_old & PAD_A)) {
;
L0051:	lda     _pad1
	and     #$80
	jeq     L0002
	lda     _pad1_old
	and     #$80
	jne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; dialogue_shown = 0;
;
	lda     #$00
	sta     _dialogue_shown
;
; game_state = STATE_ENDING;
;
	lda     #$06
	sta     _game_state
;
; else if (game_state == STATE_ENDING) {
;
	jmp     L005A
L0055:	lda     _game_state
	cmp     #$06
	jne     L0002
;
; if (!ending_shown) {
;
	lda     _ending_shown
	bne     L0056
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; WRITE("ENDING GOES HERE", 8, 10);
;
	jsr     decsp3
	lda     #<(S0015)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0015)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; WRITE("THANKS FOR PLAYING", 7, 12);
;
	jsr     decsp3
	lda     #<(S0017)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0017)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$87
	jsr     _multi_vram_buffer_horz
;
; WRITE("PRESS START TO RESTART", 5, 24);
;
	jsr     decsp3
	lda     #<(S0019)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0019)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$05
	jsr     _multi_vram_buffer_horz
;
; ending_shown = 1;
;
	lda     #$01
	sta     _ending_shown
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if ((pad1 & PAD_START) && !(pad1_old & PAD_START)) {
;
L0056:	lda     _pad1
	and     #$10
	jeq     L0002
	lda     _pad1_old
	and     #$10
	jne     L0002
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; game_state = STATE_TITLE;
;
	lda     #$00
	sta     _game_state
;
; ending_shown = 0;
;
	sta     _ending_shown
;
; while (1){
;
	jmp     L005A

.endproc

