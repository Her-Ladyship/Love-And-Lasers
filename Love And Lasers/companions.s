;
; File generated by cc65 v 2.19 - Git 065b0d7
;
	.fopt		compiler,"cc65 v 2.19 - Git 065b0d7"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_update_arrow
	.export		_draw_crewmate_menu
	.export		_resting_companion_text
	.export		_handle_selection_arrow
	.export		_update_ability_cooldown
	.export		_start_ability_cooldown
	.export		_reset_companion_ability_state
	.export		_fire_zarnella_lasers
	.export		_draw_zarnella_lasers
	.export		_get_romance_winner
	.export		_affection_bonus
	.export		_get_picks_for_winner
	.import		_oam_meta_spr
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_i
	.import		_j
	.import		_selected_crewmate
	.import		_previous_crewmate
	.import		_ability_ready
	.import		_ability_cooldown_timer
	.import		_pad1
	.import		_pad1_old
	.import		_player_invincible
	.import		_invincibility_timer
	.import		_zarnella_laser_timer
	.import		_player_x
	.import		_player_y
	.import		_player_score
	.import		_zarnella_picks
	.import		_luma_picks
	.import		_bubbles_picks
	.import		_special_bullet_sprite
	.import		_display_blinking_message
	.import		_enemy_x
	.import		_enemy_y
	.import		_enemy_active
	.import		_enemy_frozen
	.import		_get_current_cooldown_max

.segment	"RODATA"

S0007:
	.byte	$4F,$55,$54,$20,$48,$55,$4E,$54,$49,$4E,$47,$20,$53,$50,$41,$43
	.byte	$45,$20,$57,$49,$54,$43,$48,$45,$53,$00
S0009:
	.byte	$52,$45,$43,$48,$41,$52,$47,$49,$4E,$47,$20,$54,$41,$43,$54,$49
	.byte	$43,$41,$4C,$20,$43,$4F,$52,$45,$00
S000B:
	.byte	$42,$55,$42,$42,$4C,$49,$4E,$47,$20,$49,$4E,$20,$54,$48,$45,$20
	.byte	$44,$41,$52,$4B,$00
S0005:
	.byte	$4D,$52,$2E,$20,$42,$55,$42,$42,$4C,$45,$53,$00
S0001:
	.byte	$5A,$41,$52,$4E,$45,$4C,$4C,$41,$00
S0003:
	.byte	$4C,$55,$4D,$41,$2D,$36,$00

; ---------------------------------------------------------------
; void __near__ update_arrow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_arrow: near

.segment	"CODE"

;
; int arrow_addr = NTADR_A(6, 10 + selected_crewmate * 6);
;
	ldx     #$00
	lda     _selected_crewmate
	jsr     mulax6
	clc
	adc     #$0A
	bcc     L0002
	inx
L0002:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$06
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     pushax
;
; one_vram_buffer('>', arrow_addr);
;
	lda     #$3E
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _one_vram_buffer
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_crewmate_menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_crewmate_menu: near

.segment	"CODE"

;
; WRITE("ZARNELLA", 11, 10);
;
	jsr     decsp3
	lda     #<(S0001)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0001)
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4B
	jsr     _multi_vram_buffer_horz
;
; WRITE("LUMA-6", 12, 16);
;
	jsr     decsp3
	lda     #<(S0003)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0003)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$0C
	jsr     _multi_vram_buffer_horz
;
; WRITE("MR. BUBBLES", 10, 22);
;
	jsr     decsp3
	lda     #<(S0005)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0005)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$CA
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ resting_companion_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resting_companion_text: near

.segment	"CODE"

;
; if (previous_crewmate == 0) {
;
	lda     _previous_crewmate
	bne     L0005
;
; BLINK_MSG("OUT HUNTING SPACE WITCHES", 3, 12);
;
	jsr     decsp4
	lda     #<(S0007)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(S0007)
	sta     (sp),y
	lda     #$19
	ldy     #$01
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #$0C
	jsr     _display_blinking_message
;
; if (previous_crewmate == 1) {
;
L0005:	lda     _previous_crewmate
	cmp     #$01
	bne     L0006
;
; BLINK_MSG("RECHARGING TACTICAL CORE", 4, 18);
;
	jsr     decsp4
	lda     #<(S0009)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(S0009)
	sta     (sp),y
	lda     #$18
	ldy     #$01
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #$12
	jsr     _display_blinking_message
;
; if (previous_crewmate == 2) {
;
L0006:	lda     _previous_crewmate
	cmp     #$02
	bne     L0004
;
; BLINK_MSG("BUBBLING IN THE DARK", 6, 24);
;
	jsr     decsp4
	lda     #<(S000B)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(S000B)
	sta     (sp),y
	lda     #$14
	ldy     #$01
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$18
	jmp     _display_blinking_message
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_selection_arrow (unsigned char allow_all)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_selection_arrow: near

.segment	"CODE"

;
; void handle_selection_arrow(unsigned char allow_all) {
;
	jsr     pusha
;
; if ((pad1 & PAD_DOWN) && !(pad1_old & PAD_DOWN)) {
;
	lda     _pad1
	and     #$04
	beq     L0020
	lda     _pad1_old
	and     #$04
	bne     L0020
;
; selected_crewmate = (selected_crewmate + 1) % 3;
;
	tax
L001D:	lda     _selected_crewmate
	clc
	adc     #$01
	bcc     L0009
	inx
L0009:	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     tosmoda0
	sta     _selected_crewmate
;
; } while (!allow_all && selected_crewmate == previous_crewmate && previous_crewmate != 255);
;
	ldy     #$00
	lda     (sp),y
	bne     L0020
	lda     _selected_crewmate
	jsr     pusha0
	lda     _previous_crewmate
	jsr     tosicmp0
	bne     L0020
	ldx     #$00
	lda     _previous_crewmate
	cmp     #$FF
	bne     L001D
;
; if ((pad1 & PAD_UP) && !(pad1_old & PAD_UP)) {
;
L0020:	lda     _pad1
	and     #$08
	beq     L0012
	lda     _pad1_old
	and     #$08
	bne     L0012
;
; selected_crewmate = (selected_crewmate == 0) ? 2 : selected_crewmate - 1;
;
L0024:	lda     _selected_crewmate
	bne     L0025
	lda     #$02
	jmp     L0026
L0025:	lda     _selected_crewmate
	sec
	sbc     #$01
L0026:	sta     _selected_crewmate
;
; } while (!allow_all && selected_crewmate == previous_crewmate && previous_crewmate != 255);
;
	ldy     #$00
	lda     (sp),y
	bne     L0012
	lda     _selected_crewmate
	cmp     _previous_crewmate
	bne     L0012
	lda     _previous_crewmate
	cmp     #$FF
	bne     L0024
;
; }
;
L0012:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ update_ability_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_ability_cooldown: near

.segment	"CODE"

;
; if (!ability_ready) {
;
	lda     _ability_ready
	bne     L0006
;
; if (ability_cooldown_timer > 0) {
;
	lda     _ability_cooldown_timer
	ora     _ability_cooldown_timer+1
	beq     L0003
;
; ability_cooldown_timer--;
;
	lda     _ability_cooldown_timer
	bne     L0005
	dec     _ability_cooldown_timer+1
L0005:	dec     _ability_cooldown_timer
;
; } else {
;
	rts
;
; ability_ready = 1;
;
L0003:	lda     #$01
	sta     _ability_ready
;
; }
;
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ start_ability_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_ability_cooldown: near

.segment	"CODE"

;
; ability_ready = 0;
;
	lda     #$00
	sta     _ability_ready
;
; ability_cooldown_timer = get_current_cooldown_max();
;
	jsr     _get_current_cooldown_max
	sta     _ability_cooldown_timer
	stx     _ability_cooldown_timer+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset_companion_ability_state (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_companion_ability_state: near

.segment	"CODE"

;
; ability_ready = 1;
;
	lda     #$01
	sta     _ability_ready
;
; ability_cooldown_timer = 0;
;
	lda     #$00
	sta     _ability_cooldown_timer
	sta     _ability_cooldown_timer+1
;
; player_invincible = 0;
;
	sta     _player_invincible
;
; invincibility_timer = 0;
;
	sta     _invincibility_timer
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fire_zarnella_lasers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_zarnella_lasers: near

.segment	"CODE"

;
; const signed char laser_dx[5] = {1, 2, 2, 2, 1};
;
	jsr     decsp5
	ldy     #$04
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
;
; const signed char laser_dy[5] = {-1, -1, 0, 1, 1};
;
	jsr     decsp5
	ldy     #$04
L0003:	lda     M0002,y
	sta     (sp),y
	dey
	bpl     L0003
;
; for (i = 0; i < 5; ++i) {
;
	lda     #$00
	sta     _i
L002E:	lda     _i
	cmp     #$05
	jcs     L0035
;
; for (j = 0; j < MAX_ENEMIES; ++j) {
;
	lda     #$00
	sta     _j
L002F:	lda     _j
	cmp     #$06
	jcs     L0034
;
; if (enemy_active[j]) {
;
	ldy     _j
	lda     _enemy_active,y
	jeq     L0033
;
; signed char dx = enemy_x[j] - player_x;
;
	ldy     _j
	lda     _enemy_x,y
	sec
	sbc     _player_x
	cmp     #$80
	jsr     pusha
;
; signed char dy = enemy_y[j] - player_y;
;
	ldy     _j
	lda     _enemy_y,y
	sec
	sbc     _player_y
	cmp     #$80
	jsr     pusha
;
; if ((dx * laser_dy[i] - dy * laser_dx[i]) >= -4 &&
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	bpl     L0013
	dex
L0013:	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L002A
	inx
	clc
L002A:	adc     _i
	bcc     L0015
	inx
L0015:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	bpl     L0016
	dex
L0016:	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$0B
	bcc     L002B
	inx
	clc
L002B:	adc     _i
	bcc     L0018
	inx
L0018:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	jsr     tossubax
	cmp     #$FC
	txa
	sbc     #$FF
	bvs     L0019
	eor     #$80
L0019:	jpl     L0012
;
; (dx * laser_dy[i] - dy * laser_dx[i]) <= 4 &&
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	bpl     L001B
	dex
L001B:	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L002C
	inx
	clc
L002C:	adc     _i
	bcc     L001D
	inx
L001D:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	bpl     L001E
	dex
L001E:	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$0B
	bcc     L002D
	inx
	clc
L002D:	adc     _i
	bcc     L0020
	inx
L0020:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	jsr     tossubax
	cmp     #$05
	txa
	sbc     #$00
	bvc     L0021
	eor     #$80
L0021:	bpl     L0012
;
; dx >= 0 &&
;
	ldy     #$01
	lda     (sp),y
	tax
	bmi     L0012
;
; enemy_y[j] >= PLAYFIELD_TOP && enemy_y[j] <= PLAYFIELD_BOTTOM) {
;
	ldy     _j
	lda     _enemy_y,y
	cmp     #$30
	bcc     L0012
	ldy     _j
	lda     _enemy_y,y
	cmp     #$C1
	bcs     L0012
;
; enemy_active[j] = 0;
;
	ldy     _j
	lda     #$00
	sta     _enemy_active,y
;
; enemy_frozen[j] = 0;
;
	ldy     _j
	sta     _enemy_frozen,y
;
; player_score += 10;
;
	lda     #$0A
	clc
	adc     _player_score
	sta     _player_score
	bcc     L0012
	inc     _player_score+1
;
; }
;
L0012:	jsr     incsp2
;
; for (j = 0; j < MAX_ENEMIES; ++j) {
;
L0033:	inc     _j
	jmp     L002F
;
; for (i = 0; i < 5; ++i) {
;
L0034:	inc     _i
	jmp     L002E
;
; zarnella_laser_timer = 3; // show laser visuals for 3 frames
;
L0035:	lda     #$03
	sta     _zarnella_laser_timer
;
; }
;
	ldy     #$0A
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
M0002:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01

.endproc

; ---------------------------------------------------------------
; void __near__ draw_zarnella_lasers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_zarnella_lasers: near

.segment	"CODE"

;
; const signed char laser_dx[5] = {1, 2, 2, 2, 1};
;
	jsr     decsp5
	ldy     #$04
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
;
; const signed char laser_dy[5] = {-1, -1, 0, 1, 1};
;
	jsr     decsp5
	ldy     #$04
L0003:	lda     M0002,y
	sta     (sp),y
	dey
	bpl     L0003
;
; for (i = 0; i < 5; ++i) {
;
	jsr     decsp2
	lda     #$00
	sta     _i
L0015:	lda     _i
	cmp     #$05
	jcs     L0005
;
; for (j = 1; j < 32; ++j) { // extend far enough to hit edges
;
	lda     #$01
	sta     _j
L0016:	lda     _j
	cmp     #$20
	jcs     L0018
;
; lx = player_x + laser_dx[i] * j * 8;
;
	lda     _player_x
	jsr     pusha0
	lda     sp
	ldx     sp+1
	clc
	adc     #$09
	bcc     L0013
	inx
	clc
L0013:	adc     _i
	bcc     L000D
	inx
L000D:	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     _j
	jsr     tosmula0
	jsr     aslax3
	jsr     tosaddax
	ldy     #$01
	sta     (sp),y
;
; ly = player_y + laser_dy[i] * j * 8;
;
	lda     _player_y
	jsr     pusha0
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L0014
	inx
	clc
L0014:	adc     _i
	bcc     L000F
	inx
L000F:	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     _j
	jsr     tosmula0
	jsr     aslax3
	jsr     tosaddax
	ldy     #$00
	sta     (sp),y
;
; if (lx >= 248 || ly < PLAYFIELD_TOP || ly > PLAYFIELD_BOTTOM) break;
;
	iny
	lda     (sp),y
	cmp     #$F8
	bcs     L0018
	dey
	lda     (sp),y
	cmp     #$30
	bcc     L0018
	cmp     #$C1
	bcs     L0018
;
; oam_meta_spr(lx, ly, special_bullet_sprite); // can be replaced with laser-specific sprite later
;
	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     #<(_special_bullet_sprite)
	ldx     #>(_special_bullet_sprite)
	jsr     _oam_meta_spr
;
; for (j = 1; j < 32; ++j) { // extend far enough to hit edges
;
	inc     _j
	jmp     L0016
;
; for (i = 0; i < 5; ++i) {
;
L0018:	inc     _i
	jmp     L0015
;
; }
;
L0005:	ldy     #$0C
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
M0002:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_romance_winner (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_romance_winner: near

.segment	"CODE"

;
; if (zarnella_picks > luma_picks && zarnella_picks > bubbles_picks) return 0;
;
	ldx     #$00
	lda     _zarnella_picks
	cmp     _luma_picks
	bcc     L0010
	beq     L0010
	cmp     _bubbles_picks
	beq     L0010
	bcc     L0010
	txa
	rts
;
; if (luma_picks > zarnella_picks && luma_picks > bubbles_picks) return 1;
;
L0010:	lda     _luma_picks
	cmp     _zarnella_picks
	bcc     L0013
	beq     L0013
	cmp     _bubbles_picks
	beq     L0013
	bcc     L0013
	lda     #$01
	rts
;
; if (bubbles_picks > zarnella_picks && bubbles_picks > luma_picks) return 2;
;
L0013:	lda     _bubbles_picks
	cmp     _zarnella_picks
	bcc     L0016
	beq     L0016
	cmp     _luma_picks
	beq     L0016
	bcc     L0016
	lda     #$02
	rts
;
; return selected_crewmate;
;
L0016:	lda     _selected_crewmate
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ affection_bonus (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_affection_bonus: near

.segment	"CODE"

;
; if (zarnella_picks >= 3 || luma_picks >= 3 || bubbles_picks >= 3) return 350;
;
	lda     _zarnella_picks
	cmp     #$03
	bcs     L0008
	lda     _luma_picks
	cmp     #$03
	bcs     L0008
	lda     _bubbles_picks
	cmp     #$03
	bcc     L0009
L0008:	ldx     #$01
	lda     #$5E
	rts
;
; if (zarnella_picks == 2 || luma_picks == 2 || bubbles_picks == 2) return 100;
;
L0009:	lda     _zarnella_picks
	cmp     #$02
	beq     L000A
	lda     _luma_picks
	cmp     #$02
	beq     L000A
	lda     _bubbles_picks
	cmp     #$02
	beq     L000A
	ldx     #$00
	txa
	rts
L000A:	ldx     #$00
	lda     #$64
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ get_picks_for_winner (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_picks_for_winner: near

.segment	"CODE"

;
; unsigned char winner = get_romance_winner();
;
	jsr     _get_romance_winner
	jsr     pusha
;
; if (winner == 0) return zarnella_picks;
;
	ldx     #$00
	lda     (sp,x)
	bne     L0006
	lda     _zarnella_picks
	jmp     incsp1
;
; if (winner == 1) return luma_picks;
;
L0006:	lda     (sp,x)
	cmp     #$01
	bne     L0008
	lda     _luma_picks
	jmp     incsp1
;
; if (winner == 2) return bubbles_picks;
;
L0008:	lda     (sp,x)
	cmp     #$02
	bne     L0009
	lda     _bubbles_picks
	jmp     incsp1
;
; return 0; // Failsafe
;
L0009:	txa
;
; }
;
	jmp     incsp1

.endproc

