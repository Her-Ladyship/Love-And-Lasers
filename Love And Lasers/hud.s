;
; File generated by cc65 v 2.19 - Git 065b0d7
;
	.fopt		compiler,"cc65 v 2.19 - Git 065b0d7"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_draw_hud
	.export		_update_score_string
	.export		_update_timer_string
	.export		_draw_ability_cooldown_bar
	.export		_get_current_cooldown_max
	.import		_multi_vram_buffer_horz
	.import		_i
	.import		_selected_crewmate
	.import		_ability_ready
	.import		_hp_string
	.import		_ability_cooldown_timer
	.import		_player_health
	.import		_player_score
	.import		_score_string
	.import		_shmup_timer
	.import		_timer_string

; ---------------------------------------------------------------
; void __near__ draw_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_hud: near

.segment	"CODE"

;
; hp_string[4] = '0' + player_health;
;
	lda     _player_health
	clc
	adc     #$30
	sta     _hp_string+4
;
; WRITE(hp_string, 2, 1);
;
	jsr     decsp3
	lda     #<(_hp_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_hp_string)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$22
	jsr     _multi_vram_buffer_horz
;
; update_score_string();
;
	jsr     _update_score_string
;
; WRITE(score_string, 10, 1);
;
	jsr     decsp3
	lda     #<(_score_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_score_string)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$2A
	jsr     _multi_vram_buffer_horz
;
; update_timer_string();
;
	jsr     _update_timer_string
;
; WRITE(timer_string, 2, 27);
;
	jsr     decsp3
	lda     #<(_timer_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_timer_string)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$62
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ update_score_string (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_score_string: near

.segment	"CODE"

;
; unsigned int temp_score = player_score;
;
	lda     _player_score
	ldx     _player_score+1
	jsr     pushax
;
; score_string[7] = '0' + (temp_score / 10000) % 10;
;
	jsr     pushw0sp
	ldx     #$27
	lda     #$10
	jsr     tosudivax
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _score_string+7
;
; score_string[8] = '0' + (temp_score / 1000) % 10;
;
	jsr     pushw0sp
	ldx     #$03
	lda     #$E8
	jsr     tosudivax
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _score_string+8
;
; score_string[9] = '0' + (temp_score / 100) % 10;
;
	jsr     pushw0sp
	lda     #$64
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _score_string+9
;
; score_string[10] = '0' + (temp_score / 10) % 10;
;
	jsr     pushw0sp
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _score_string+10
;
; score_string[11] = '0' + temp_score % 10;
;
	jsr     pushw0sp
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _score_string+11
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ update_timer_string (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_timer_string: near

.segment	"CODE"

;
; unsigned int seconds = shmup_timer / 60;
;
	lda     _shmup_timer
	ldx     _shmup_timer+1
	jsr     pushax
	lda     #$3C
	jsr     tosudiva0
	jsr     pushax
;
; timer_string[7] = '0' + (seconds / 10) % 10;
;
	jsr     pushw0sp
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _timer_string+7
;
; timer_string[8] = '0' + (seconds % 10);
;
	jsr     pushw0sp
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _timer_string+8
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_ability_cooldown_bar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_ability_cooldown_bar: near

.segment	"CODE"

;
; unsigned char segments = 4;
;
	lda     #$04
	jsr     pusha
;
; unsigned char fill = 0;
;
	lda     #$00
	jsr     pusha
;
; unsigned int max = get_current_cooldown_max();
;
	jsr     _get_current_cooldown_max
	jsr     pushax
;
; char bar_string[] = "[    \\";
;
	jsr     decsp7
	ldy     #$06
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
;
; if (ability_ready) {
;
	lda     _ability_ready
	beq     L0003
;
; fill = segments;
;
	ldy     #$0A
	lda     (sp),y
;
; } else {
;
	jmp     L0012
;
; fill = (segments * (max - ability_cooldown_timer)) / max;
;
L0003:	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     _ability_cooldown_timer
	pha
	txa
	sbc     _ability_cooldown_timer+1
	tax
	pla
	jsr     tosumulax
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosudivax
L0012:	ldy     #$09
	sta     (sp),y
;
; for (i = 0; i < segments; ++i) {
;
	lda     #$00
	sta     _i
L000F:	lda     _i
	ldy     #$0A
	cmp     (sp),y
	bcs     L0006
;
; bar_string[1 + i] = (i < fill) ? '=' : ' ';
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L000E
	inx
	clc
L000E:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	lda     _i
	dey
	cmp     (sp),y
	bcs     L0010
	lda     #$3D
	jmp     L0011
L0010:	lda     #$20
L0011:	ldy     #$00
	sta     (ptr1),y
;
; for (i = 0; i < segments; ++i) {
;
	inc     _i
	jmp     L000F
;
; WRITE(bar_string, 25, 1);
;
L0006:	jsr     decsp3
	lda     sp
	ldx     sp+1
	clc
	adc     #$03
	bcc     L000C
	inx
L000C:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$39
	jsr     _multi_vram_buffer_horz
;
; }
;
	ldy     #$0B
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$5B,$20,$20,$20,$20,$5C,$00

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ get_current_cooldown_max (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_current_cooldown_max: near

.segment	"CODE"

;
; if (selected_crewmate == 0) return ZARNELLA_COOLDOWN;
;
	lda     _selected_crewmate
	bne     L0004
	ldx     #$01
	lda     #$2C
	rts
;
; if (selected_crewmate == 1) return LUMA6_COOLDOWN;
;
L0004:	lda     _selected_crewmate
	cmp     #$01
	bne     L0003
	ldx     #$02
	lda     #$58
	rts
;
; return BUBBLES_COOLDOWN;
;
L0003:	ldx     #$04
	lda     #$B0
;
; }
;
	rts

.endproc

