;
; File generated by cc65 v 2.19 - Git 065b0d7
;
	.fopt		compiler,"cc65 v 2.19 - Git 065b0d7"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_show_briefing_typewriter
	.export		_is_briefing_done
	.export		_mission_begin_text
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_selected_crewmate
	.import		_briefing_line
	.export		_briefing_lines
	.export		_briefing_char
	.export		_briefing_delay

.segment	"DATA"

_briefing_char:
	.byte	$00
_briefing_delay:
	.byte	$00

.segment	"RODATA"

_briefing_lines:
	.addr	S0001
	.byte	$02
	.byte	$02
	.addr	S0002
	.byte	$04
	.byte	$05
	.addr	S0003
	.byte	$03
	.byte	$07
	.addr	S0004
	.byte	$01
	.byte	$0A
	.addr	S0005
	.byte	$01
	.byte	$0C
	.addr	S0006
	.byte	$01
	.byte	$0F
	.addr	S0007
	.byte	$01
	.byte	$11
	.addr	S0008
	.byte	$01
	.byte	$16
	.addr	S0009
	.byte	$09
	.byte	$1A
S0004:
	.byte	$4F,$55,$54,$50,$4F,$53,$54,$20,$44,$45,$4C,$54,$41,$2D,$5A,$55
	.byte	$4C,$55,$2D,$37,$20,$57,$45,$4E,$54,$20,$44,$41,$52,$4B,$2E,$00
S0007:
	.byte	$45,$58,$50,$4C,$4F,$53,$49,$4F,$4E,$53,$20,$4F,$50,$54,$49,$4F
	.byte	$4E,$41,$4C,$20,$42,$55,$54,$20,$4C,$49,$4B,$45,$4C,$59,$00
S0008:
	.byte	$59,$4F,$55,$27,$52,$45,$20,$4F,$55,$52,$20,$4F,$4E,$4C,$59,$20
	.byte	$48,$4F,$50,$45,$2E,$20,$53,$4F,$52,$54,$20,$4F,$46,$2E,$00
S0005:
	.byte	$50,$4F,$53,$53,$49,$42,$4C,$45,$20,$41,$49,$20,$47,$4F,$4E,$45
	.byte	$20,$52,$4F,$47,$55,$45,$2E,$20,$41,$47,$41,$49,$4E,$2E,$00
S0006:
	.byte	$47,$4F,$20,$49,$4E,$20,$48,$41,$52,$44,$20,$41,$4E,$44,$20,$46
	.byte	$49,$4E,$44,$20,$54,$48,$45,$20,$54,$52,$55,$54,$48,$2E,$00
S0001:
	.byte	$47,$41,$4C,$41,$43,$54,$49,$43,$20,$43,$4F,$4D,$4D,$41,$4E,$44
	.byte	$20,$42,$4F,$4F,$54,$49,$4E,$47,$20,$55,$50,$2E,$2E,$00
S0003:
	.byte	$4F,$52,$20,$41,$54,$20,$4C,$45,$41,$53,$54,$20,$53,$4F,$4D,$45
	.byte	$4F,$4E,$45,$20,$53,$48,$4F,$4F,$54,$59,$2E,$00
S0014:
	.byte	$4C,$45,$54,$27,$53,$20,$4D,$41,$4B,$45,$20,$54,$48,$49,$53,$20
	.byte	$45,$46,$46,$49,$43,$49,$45,$4E,$54,$00
S000E:
	.byte	$49,$27,$4C,$4C,$20,$48,$41,$55,$4E,$54,$20,$59,$4F,$55,$20,$50
	.byte	$45,$52,$53,$4F,$4E,$41,$4C,$4C,$59,$00
S0012:
	.byte	$54,$41,$43,$54,$49,$43,$41,$4C,$20,$53,$59,$53,$54,$45,$4D,$53
	.byte	$20,$47,$52,$45,$45,$4E,$20,$2D,$00
S0002:
	.byte	$43,$41,$50,$54,$41,$49,$4E,$2C,$20,$57,$45,$20,$4E,$45,$45,$44
	.byte	$20,$41,$20,$48,$45,$52,$4F,$2C,$00
S000C:
	.byte	$49,$46,$20,$59,$4F,$55,$20,$47,$45,$54,$20,$4D,$45,$20,$4B,$49
	.byte	$4C,$4C,$45,$44,$2C,$00
S0018:
	.byte	$42,$55,$42,$42,$4C,$45,$20,$4D,$4F,$44,$45,$20,$45,$4E,$47,$41
	.byte	$47,$45,$44,$21,$00
S0009:
	.byte	$50,$52,$45,$53,$53,$20,$41,$20,$42,$55,$54,$54,$4F,$4E,$00
S0016:
	.byte	$4D,$52,$20,$42,$55,$42,$42,$4C,$45,$53,$3A,$00
S000A:
	.byte	$5A,$41,$52,$4E,$45,$4C,$4C,$41,$3A,$00
S0010:
	.byte	$4C,$55,$4D,$41,$2D,$36,$3A,$00

; ---------------------------------------------------------------
; void __near__ show_briefing_typewriter (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_briefing_typewriter: near

.segment	"CODE"

;
; const char* current = briefing_lines[briefing_line].text;
;
	ldx     #$00
	lda     _briefing_line
	jsr     aslax2
	clc
	adc     #<(_briefing_lines)
	sta     ptr1
	txa
	adc     #>(_briefing_lines)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
;
; unsigned char x = briefing_lines[briefing_line].x;
;
	ldx     #$00
	lda     _briefing_line
	jsr     aslax2
	clc
	adc     #<(_briefing_lines)
	sta     ptr1
	txa
	adc     #>(_briefing_lines)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha
;
; unsigned char y = briefing_lines[briefing_line].y;
;
	ldx     #$00
	lda     _briefing_line
	jsr     aslax2
	clc
	adc     #<(_briefing_lines)
	sta     ptr1
	txa
	adc     #>(_briefing_lines)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha
;
; if (briefing_line >= NUM_BRIEFING_LINES) return;
;
	lda     _briefing_line
	cmp     #$09
	bcs     L0005
;
; if (++briefing_delay < 2) return; // Lower = faster typing
;
	inc     _briefing_delay
	lda     _briefing_delay
	cmp     #$02
	bcc     L0005
;
; briefing_delay = 0;
;
	lda     #$00
	sta     _briefing_delay
;
; if (current[briefing_char] != '\0') {
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     _briefing_char
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	beq     L0009
;
; one_vram_buffer(current[briefing_char], NTADR_A(x + briefing_char, y));
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     _briefing_char
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     _briefing_char
	bcc     L0008
	inx
L0008:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; briefing_char++;
;
	inc     _briefing_char
;
; } else {
;
	jmp     incsp4
;
; briefing_line++;
;
L0009:	inc     _briefing_line
;
; briefing_char = 0;
;
	sta     _briefing_char
;
; }
;
L0005:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_briefing_done (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_briefing_done: near

.segment	"CODE"

;
; return (briefing_line >= NUM_BRIEFING_LINES);
;
	lda     _briefing_line
	cmp     #$09
	lda     #$00
	rol     a
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ mission_begin_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mission_begin_text: near

.segment	"CODE"

;
; if (selected_crewmate == 0) {
;
	lda     _selected_crewmate
	bne     L0007
;
; WRITE("ZARNELLA:", 11, 10);
;
	jsr     decsp3
	lda     #<(S000A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S000A)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4B
	jsr     _multi_vram_buffer_horz
;
; WRITE("IF YOU GET ME KILLED,", 5, 13);
;
	jsr     decsp3
	lda     #<(S000C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S000C)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A5
	jsr     _multi_vram_buffer_horz
;
; WRITE("I'LL HAUNT YOU PERSONALLY", 3, 15);
;
	jsr     decsp3
	lda     #<(S000E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S000E)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E3
;
; else if (selected_crewmate == 1) {
;
	jmp     _multi_vram_buffer_horz
L0007:	lda     _selected_crewmate
	cmp     #$01
	bne     L0004
;
; WRITE("LUMA-6:", 12, 10);
;
	jsr     decsp3
	lda     #<(S0010)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0010)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4C
	jsr     _multi_vram_buffer_horz
;
; WRITE("TACTICAL SYSTEMS GREEN -", 4, 13);
;
	jsr     decsp3
	lda     #<(S0012)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0012)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A4
	jsr     _multi_vram_buffer_horz
;
; WRITE("LET'S MAKE THIS EFFICIENT", 3, 15);
;
	jsr     decsp3
	lda     #<(S0014)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0014)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E3
;
; else {
;
	jmp     _multi_vram_buffer_horz
;
; WRITE("MR BUBBLES:", 11, 10);
;
L0004:	jsr     decsp3
	lda     #<(S0016)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0016)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4B
	jsr     _multi_vram_buffer_horz
;
; WRITE("BUBBLE MODE ENGAGED!", 6, 13);
;
	jsr     decsp3
	lda     #<(S0018)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(S0018)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz

.endproc

